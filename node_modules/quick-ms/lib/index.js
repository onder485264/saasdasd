"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccurateTimeObject = exports.getReadableTime = exports.getTimeObject = exports.getMilliseconds = void 0;
const private_1 = require("./private");
/**
 * Returns a total number of milliseconds.
 * @param {string} [timeFormat]
 * @returns {number}
 * @access public
 */
function getMilliseconds(timeFormat) {
    if (!timeFormat || timeFormat === '')
        return 0;
    timeFormat = timeFormat.replace(/[, ]+/g, '').toLowerCase();
    if (timeFormat.includes(':')) {
        if (['pm', 'am'].includes(timeFormat.slice(-2, timeFormat.length)))
            return private_1.read12thFormat(timeFormat);
        else
            return private_1.read24thFormat(timeFormat);
    }
    else
        return private_1.readTextFormat(timeFormat);
}
exports.getMilliseconds = getMilliseconds;
/**
 * Returns timeObject.
 * @param {number} [ms]
 * @returns {timeObject}
 * @access public
 */
function getTimeObject(ms) {
    if (!ms || typeof ms !== 'number' || !isFinite(ms))
        throw new TypeError(`Final value is greater than Number can hold or you provided invalid argument.`);
    const result = {
        years: 0,
        months: 0,
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
        milliseconds: Math.floor(ms)
    };
    // Calculate time in rough way
    while (result.milliseconds >= 1000) {
        if (result.milliseconds >= 3.154e+10) {
            result.years++;
            result.milliseconds -= 3.154e+10;
        }
        if (result.milliseconds >= 2.592e+9) {
            result.months++;
            result.milliseconds -= 2.592e+9;
        }
        if (result.milliseconds >= 8.64e+7) {
            result.days++;
            result.milliseconds -= 8.64e+7;
        }
        if (result.milliseconds >= 3.6e+6) {
            result.hours++;
            result.milliseconds -= 3.6e+6;
        }
        if (result.milliseconds >= 60000) {
            result.minutes++;
            result.milliseconds -= 60000;
        }
        if (result.milliseconds >= 1000) {
            result.seconds++;
            result.milliseconds -= 1000;
        }
    }
    // Make it smooth, aka sort
    if (result.seconds >= 60) {
        result.minutes += Math.floor(result.seconds / 60);
        result.seconds = result.seconds - (Math.floor(result.seconds / 60) * 60);
    }
    if (result.minutes >= 60) {
        result.hours += Math.floor(result.minutes / 60);
        result.minutes = result.minutes - (Math.floor(result.minutes / 60) * 60);
    }
    if (result.hours >= 24) {
        result.days += Math.floor(result.hours / 24);
        result.hours = result.hours - (Math.floor(result.hours / 24) * 24);
    }
    if (result.days >= 30) {
        result.months += Math.floor(result.days / 30);
        result.days = result.days - (Math.floor(result.days / 30) * 30);
    }
    if (result.months >= 12) {
        result.years += Math.floor(result.months / 12);
        result.months = result.months - (Math.floor(result.months / 12) * 12);
    }
    return result;
}
exports.getTimeObject = getTimeObject;
/**
 * Return raw time value as a human readable string.
 * @param {number} [ms]
 * @param {readableOptions} [opt]
 * @returns {string}
 * @access public
 */
function getReadableTime(ms, opt = { compact: false, showEmpty: false, showMS: false }) {
    if (!ms || ms && !isFinite(ms))
        throw new TypeError('You need to pass a total number of milliseconds! (That number cannot be grater than Number limits)');
    if (typeof ms !== 'number')
        throw new TypeError(`You need to pass a number! Instead receinved: ${typeof ms}`);
    const t = getTimeObject(ms);
    const reply = [];
    //if (!options.showMS && ms <= 1000) throw new TypeError(`Final value is smaller than 1 second (Exactly: ${ms}ms). To show milliseconds use the showMS option.`);
    if (opt.compact) {
        if (t.years)
            reply.push(`${t.years}yrs`);
        else if (opt.showEmpty)
            reply.push('0yrs');
        if (t.months)
            reply.push(`${t.months}mo`);
        else if (opt.showEmpty)
            reply.push('0mo');
        if (t.days)
            reply.push(`${t.days}d`);
        else if (opt.showEmpty)
            reply.push('0d');
        if (t.hours)
            reply.push(`${t.hours}hrs`);
        else if (opt.showEmpty)
            reply.push('0hrs');
        if (t.minutes)
            reply.push(`${t.minutes}min`);
        else if (opt.showEmpty)
            reply.push('0min');
        if (t.seconds)
            reply.push(`${t.seconds}sec`);
        else if (opt.showEmpty)
            reply.push('0sec');
        if (t.milliseconds && opt.showMS)
            reply.push(`${t.milliseconds}ms`);
        else if (opt.showEmpty && opt.showMS)
            reply.push('0ms');
    }
    else {
        if (t.years)
            reply.push(`${t.years} year${t.years > 1 ? 's' : ''}`);
        else if (opt.showEmpty)
            reply.push('0 years');
        if (t.months)
            reply.push(`${t.months} month${t.months > 1 ? 's' : ''}`);
        else if (opt.showEmpty)
            reply.push('0 months');
        if (t.days)
            reply.push(`${t.days} day${t.days > 1 ? 's' : ''}`);
        else if (opt.showEmpty)
            reply.push('0 days');
        if (t.hours)
            reply.push(`${t.hours} hour${t.hours > 1 ? 's' : ''}`);
        else if (opt.showEmpty)
            reply.push('0 hours');
        if (t.minutes)
            reply.push(`${t.minutes} minute${t.minutes > 1 ? 's' : ''}`);
        else if (opt.showEmpty)
            reply.push('0 minutes');
        if (t.seconds)
            reply.push(`${t.seconds} second${t.seconds > 1 ? 's' : ''}`);
        else if (opt.showEmpty)
            reply.push('0 seconds');
        if (t.milliseconds && opt.showMS)
            reply.push(`${t.milliseconds} millisecond${t.milliseconds > 1 ? 's' : ''}`);
        else if (opt.showEmpty && opt.showMS)
            reply.push('0 milliseconds');
    }
    if (reply.length > 0)
        return reply.join(', ');
    else {
        if (opt.compact)
            return '0sec';
        else
            return '0 seconds';
    }
}
exports.getReadableTime = getReadableTime;
/**
 * Returns timeObject (accurate version).
 * @param {number} [ms]
 * @returns {accurateTimeObject}
 * @access public
 */
function getAccurateTimeObject(ms) {
    if (!ms || typeof ms !== 'number' || !isFinite(ms))
        throw new TypeError(`Final value is greater than Number can hold or you provided invalid argument.`);
    const result = {
        centuries: 0,
        decades: 0,
        calendarYears: 0,
        months: 0,
        weeks: 0,
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
        milliseconds: Math.floor(ms)
    };
    // Calculate time in rough way
    while (result.milliseconds >= 1000) {
        if (result.milliseconds >= 3.154e+12) {
            result.centuries++;
            result.milliseconds -= 3.154e+12;
        }
        if (result.milliseconds >= 3.154e+11) {
            result.decades++;
            result.milliseconds -= 3.154e+11;
        }
        if (result.milliseconds >= 3.154e+10) {
            result.calendarYears++;
            result.milliseconds -= 3.154e+10;
        }
        if (result.milliseconds >= 2.628e+9) {
            result.months++;
            result.milliseconds -= 2.628e+9;
        }
        if (result.milliseconds >= 6.048e+8) {
            result.weeks++;
            result.milliseconds -= 6.048e+8;
        }
        if (result.milliseconds >= 8.64e+7) {
            result.days++;
            result.milliseconds -= 8.64e+7;
        }
        if (result.milliseconds >= 3.6e+6) {
            result.hours++;
            result.milliseconds -= 3.6e+6;
        }
        if (result.milliseconds >= 60000) {
            result.minutes++;
            result.milliseconds -= 60000;
        }
        if (result.milliseconds >= 1000) {
            result.seconds++;
            result.milliseconds -= 1000;
        }
    }
    // Make it smooth, aka sort
    if (result.seconds >= 60) {
        result.minutes += Math.floor(result.seconds / 60);
        result.seconds = result.seconds - (Math.floor(result.seconds / 60) * 60);
    }
    if (result.minutes >= 60) {
        result.hours += Math.floor(result.minutes / 60);
        result.minutes = result.minutes - (Math.floor(result.minutes / 60) * 60);
    }
    if (result.hours >= 24) {
        result.days += Math.floor(result.hours / 24);
        result.hours = result.hours - (Math.floor(result.hours / 24) * 24);
    }
    if (result.days >= 7) {
        result.weeks += Math.floor(result.days / 7);
        result.days = result.days - (Math.floor(result.days / 7) * 7);
    }
    if (result.weeks >= 4.34524) {
        result.months += Math.floor(result.weeks / 4.34524);
        result.weeks = result.days - (Math.floor(result.days / 4.34524) * 4.34524);
    }
    if (result.months >= 12) {
        result.calendarYears += Math.floor(result.months / 12);
        result.months = result.months - (Math.floor(result.months / 12) * 12);
    }
    if (result.calendarYears >= 10) {
        result.decades += Math.floor(result.calendarYears / 10);
        result.calendarYears = result.calendarYears - (Math.floor(result.calendarYears / 10) * 10);
    }
    if (result.decades >= 12) {
        result.centuries += Math.floor(result.decades / 10);
        result.decades = result.decades - (Math.floor(result.decades / 10) * 10);
    }
    return result;
}
exports.getAccurateTimeObject = getAccurateTimeObject;
//# sourceMappingURL=index.js.map